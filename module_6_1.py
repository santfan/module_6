class Animal:
  '''Объявим класс животное'''
  # Установим флаг животное живо
  alive = True
  # Усьановим флаг сытости в значение голодно
  fed = False
  # Функция инициации
  def __init__(self, name):
    self.name = name
  # Функция еды
  def eat(self, food):
    # Если еда съедобна
    if food.adible == True:
      # Животное сыто
      Animal.fed = True
      print(f'{self.name} съел {food.name}')
    else:
      # Если еда не съедобна флаг "живой" устанавливаем в Ложь
      Animal.alive = False
      print(f'{self.name} не стал есть {food.name}')

class Plant:
  '''Объявим класс растение установим флаг "съедобно" в Ложь'''
  adible = False
  # Функция инициации
  def __init__(self, name):
    self.name = name

class Mammal(Animal):
  '''Для класса млекопитающее родительский класс животное'''
  pass
class Predator(Animal):
  '''Для класса хищник родительский класс животное'''
  pass

class Flower(Plant):
  '''Для класса цветы родительский класс расстения'''
  # Для цветов "съедобное" установим в Ложь
  adible = False
class Fruit(Plant):
  '''Для класса фрукты родительский класс расстения'''
  # Для фруктов "съедобное" установим в Истина
  adible = True

# Создадим экземпляр хищника
a1 = Predator('Волк с Уолл-Стрит')
# Создадим экземпляр млекопитающее
a2 = Mammal('Хатико')
# Создадим экземпляр цветок
p1 = Flower('Цветик семицветик')
# Создадим экземпляр фрукт
p2 = Fruit('Завадной апельсин')

# Проверим результат создания экземпляров
print(f'{a1.name} - хищник')
print(f'{a2.name} - млекопитающее')
print(f'{p1.name} - цветок')
print(f'{p2.name} - фрукт')

# Состояние экземпляров
print(a1.alive)
print(a2.fed)
# Накормим волка цветком
a1.eat(p1)
# Накормим Хатико апельсином
a2.eat(p2)
# Проверим как изменилось состояние экземпляров
print(a1.alive)
print(a2.fed)